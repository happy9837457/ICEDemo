// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.1

package com.palm.ice.ice;

// <auto-generated>
//
// Generated from file `Printer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


public final class PrinterPrxHelper extends Ice.ObjectPrxHelperBase implements PrinterPrx
{
    public boolean
    printPIceBean(PIceBean bean)
    {
        return printPIceBean(bean, null, false);
    }

    public boolean
    printPIceBean(PIceBean bean, java.util.Map<String, String> __ctx)
    {
        return printPIceBean(bean, __ctx, true);
    }

    private boolean
    printPIceBean(PIceBean bean, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("printPIceBean");
                __delBase = __getDelegate(false);
                _PrinterDel __del = (_PrinterDel)__delBase;
                return __del.printPIceBean(bean, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __printPIceBean_name = "printPIceBean";

    public Ice.AsyncResult begin_printPIceBean(PIceBean bean)
    {
        return begin_printPIceBean(bean, null, false, null);
    }

    public Ice.AsyncResult begin_printPIceBean(PIceBean bean, java.util.Map<String, String> __ctx)
    {
        return begin_printPIceBean(bean, __ctx, true, null);
    }

    public Ice.AsyncResult begin_printPIceBean(PIceBean bean, Ice.Callback __cb)
    {
        return begin_printPIceBean(bean, null, false, __cb);
    }

    public Ice.AsyncResult begin_printPIceBean(PIceBean bean, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_printPIceBean(bean, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_printPIceBean(PIceBean bean, Callback_Printer_printPIceBean __cb)
    {
        return begin_printPIceBean(bean, null, false, __cb);
    }

    public Ice.AsyncResult begin_printPIceBean(PIceBean bean, java.util.Map<String, String> __ctx, Callback_Printer_printPIceBean __cb)
    {
        return begin_printPIceBean(bean, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_printPIceBean(PIceBean bean, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__printPIceBean_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __printPIceBean_name, __cb);
        try
        {
            __result.__prepare(__printPIceBean_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeObject(bean);
            __os.writePendingObjects();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_printPIceBean(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __printPIceBean_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    printPIceBeanArray(PIceBean[] array)
    {
        return printPIceBeanArray(array, null, false);
    }

    public boolean
    printPIceBeanArray(PIceBean[] array, java.util.Map<String, String> __ctx)
    {
        return printPIceBeanArray(array, __ctx, true);
    }

    private boolean
    printPIceBeanArray(PIceBean[] array, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("printPIceBeanArray");
                __delBase = __getDelegate(false);
                _PrinterDel __del = (_PrinterDel)__delBase;
                return __del.printPIceBeanArray(array, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __printPIceBeanArray_name = "printPIceBeanArray";

    public Ice.AsyncResult begin_printPIceBeanArray(PIceBean[] array)
    {
        return begin_printPIceBeanArray(array, null, false, null);
    }

    public Ice.AsyncResult begin_printPIceBeanArray(PIceBean[] array, java.util.Map<String, String> __ctx)
    {
        return begin_printPIceBeanArray(array, __ctx, true, null);
    }

    public Ice.AsyncResult begin_printPIceBeanArray(PIceBean[] array, Ice.Callback __cb)
    {
        return begin_printPIceBeanArray(array, null, false, __cb);
    }

    public Ice.AsyncResult begin_printPIceBeanArray(PIceBean[] array, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_printPIceBeanArray(array, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_printPIceBeanArray(PIceBean[] array, Callback_Printer_printPIceBeanArray __cb)
    {
        return begin_printPIceBeanArray(array, null, false, __cb);
    }

    public Ice.AsyncResult begin_printPIceBeanArray(PIceBean[] array, java.util.Map<String, String> __ctx, Callback_Printer_printPIceBeanArray __cb)
    {
        return begin_printPIceBeanArray(array, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_printPIceBeanArray(PIceBean[] array, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__printPIceBeanArray_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __printPIceBeanArray_name, __cb);
        try
        {
            __result.__prepare(__printPIceBeanArray_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            PIceBeanArrayHelper.write(__os, array);
            __os.writePendingObjects();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_printPIceBeanArray(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __printPIceBeanArray_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    printPIceMap(java.util.Map<java.lang.String, java.lang.String> map)
    {
        return printPIceMap(map, null, false);
    }

    public boolean
    printPIceMap(java.util.Map<java.lang.String, java.lang.String> map, java.util.Map<String, String> __ctx)
    {
        return printPIceMap(map, __ctx, true);
    }

    private boolean
    printPIceMap(java.util.Map<java.lang.String, java.lang.String> map, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("printPIceMap");
                __delBase = __getDelegate(false);
                _PrinterDel __del = (_PrinterDel)__delBase;
                return __del.printPIceMap(map, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __printPIceMap_name = "printPIceMap";

    public Ice.AsyncResult begin_printPIceMap(java.util.Map<java.lang.String, java.lang.String> map)
    {
        return begin_printPIceMap(map, null, false, null);
    }

    public Ice.AsyncResult begin_printPIceMap(java.util.Map<java.lang.String, java.lang.String> map, java.util.Map<String, String> __ctx)
    {
        return begin_printPIceMap(map, __ctx, true, null);
    }

    public Ice.AsyncResult begin_printPIceMap(java.util.Map<java.lang.String, java.lang.String> map, Ice.Callback __cb)
    {
        return begin_printPIceMap(map, null, false, __cb);
    }

    public Ice.AsyncResult begin_printPIceMap(java.util.Map<java.lang.String, java.lang.String> map, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_printPIceMap(map, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_printPIceMap(java.util.Map<java.lang.String, java.lang.String> map, Callback_Printer_printPIceMap __cb)
    {
        return begin_printPIceMap(map, null, false, __cb);
    }

    public Ice.AsyncResult begin_printPIceMap(java.util.Map<java.lang.String, java.lang.String> map, java.util.Map<String, String> __ctx, Callback_Printer_printPIceMap __cb)
    {
        return begin_printPIceMap(map, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_printPIceMap(java.util.Map<java.lang.String, java.lang.String> map, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__printPIceMap_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __printPIceMap_name, __cb);
        try
        {
            __result.__prepare(__printPIceMap_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            PIceMapHelper.write(__os, map);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_printPIceMap(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __printPIceMap_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public static PrinterPrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        PrinterPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (PrinterPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA("::com::palm::ice::ice::Printer"))
                {
                    PrinterPrxHelper __h = new PrinterPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static PrinterPrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        PrinterPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (PrinterPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA("::com::palm::ice::ice::Printer", __ctx))
                {
                    PrinterPrxHelper __h = new PrinterPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static PrinterPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        PrinterPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA("::com::palm::ice::ice::Printer"))
                {
                    PrinterPrxHelper __h = new PrinterPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static PrinterPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        PrinterPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA("::com::palm::ice::ice::Printer", __ctx))
                {
                    PrinterPrxHelper __h = new PrinterPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static PrinterPrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        PrinterPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (PrinterPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                PrinterPrxHelper __h = new PrinterPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static PrinterPrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        PrinterPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            PrinterPrxHelper __h = new PrinterPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _PrinterDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _PrinterDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, PrinterPrx v)
    {
        __os.writeProxy(v);
    }

    public static PrinterPrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            PrinterPrxHelper result = new PrinterPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
